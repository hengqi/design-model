本文出自 http://www.hollischuang.com/archives/1391
1. 概念
静态工厂方法（Static Factory Method）模式：又叫做简单工程模式，是由一个工厂对象决定创建出哪一种产品类的实例。该模式是工厂模式中，最简单实用的模式，可以理解为是不同工厂模式的一个特殊实现。
值得注意的是，静态工厂方法模式并不属于23种设计模式之一，但是它是抽象工厂模式，工厂方法模式的基础，并且也有广泛的应用。

2. 优点：
    2.1 一个调用者想创建一个对象，只要知道其名称就可以了。
    2.2 屏蔽产品的具体实现，调用者只关心产品的接口。


3. 角色
    3.1 工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑。在java中往往由一个具体类实现。（OperationFactory）
    3.2 抽象产品角色：它一般是具体产品角色继承的父类或者实现的接口。在java中由接口或者抽象类来实现。（Operation）
    3.3 具体产品角色：工厂类所创建的对象就是词角色的实例。在java中由一个具体类实现。（OperationAdd\OperationSub等）

4. 静态工厂方法模式存在的问题：
从开闭原则(对扩展开放;对修改封闭)上来分析下简单工厂模式。当我们需要增加一种计算时，例如开平方。这个时候我们需要先定义一个类继承Operation类，其中实现平方的代码。
除此之外我们还要修改OperationFactory类的代码，增加一个case。这显然是违背开闭原则的。可想而知对于新产品的加入，工厂类是很被动的。
我们举的例子是最简单的情况。而在实际应用中，很可能产品是一个多层次的树状结构。 简单工厂可能就不太适用了。

5. 总结
工厂类是整个简单工厂模式的关键。包含了必要的逻辑判断，根据外界给定的信息，决定究竟应该创建哪个具体类的对象。通过使用工厂类，外界可以从直接创建具体产品对象的尴尬局面摆脱出来，仅仅需要负责“消费”对象就可以了。
而不必管这些对象究竟如何创建及如何组织的。明确了各自的职责和权利，有利于整个软件体系结构的优化。
但是
由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。
当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；
这些缺点在工厂方法模式中得到了一定的解决。